package com.ax.shop.entity;

import com.alibaba.fastjson.annotation.JSONField;
import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import java.util.Collection;
import java.util.List;

/**
 * @author axing
 */
public class Userinfo implements UserDetails {


    public static final int USERTYPE_NORMAL;

    static {
        USERTYPE_NORMAL = 0;
    }

    public static final int USERTYPE_SYSTEM;

    static {
        USERTYPE_SYSTEM = 1;
    }

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_userinfo.id
     *
     * @mbggenerated
     */
    private Long id;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_userinfo.username
     *
     * @mbggenerated
     */
    private String userName;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_userinfo.password
     *
     * @mbggenerated
     */
    private String passWord;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_userinfo.userType
     *
     * @mbggenerated
     */
    private Integer userType;

    private String token;

    List<GrantedAuthority> grantedAuthorities;

    /**
     * This method was generated by MyBatis Generator.
     * This method returns the value of the database column t_userinfo.id
     *
     * @return the value of t_userinfo.id
     *
     * @mbggenerated
     */
    public Long getId() {
        return id;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method sets the value of the database column t_userinfo.id
     *
     * @param id the value for t_userinfo.id
     *
     * @mbggenerated
     */
    public void setId(Long id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassWord() {
        return passWord;
    }

    public void setPassWord(String passWord) {
        this.passWord = passWord;
    }

    public Integer getUserType() {
        return userType;
    }

    public void setUserType(Integer userType) {
        this.userType = userType;
    }

    public String getToken() {

        token= JWT.create().withAudience(this.id.toString())
                .sign(Algorithm.HMAC256(this.passWord));

        return token;
    }

    @Override
    public String toString() {
        return "Userinfo{" +
                "id=" + id +
                ", userName='" + userName + '\'' +
                ", passWord='" + passWord + '\'' +
                ", userType=" + userType +
                '}';
    }

    public void setGrantedAuthorities(List<GrantedAuthority> grantedAuthorities) {
        this.grantedAuthorities = grantedAuthorities;
    }

    public String getNameAndAge(){
        return this.userName+passWord;
    }

//    @JsonIgnore//忽略该属性
    @JSONField(serialize=false)
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return grantedAuthorities;
    }

    @Override
    @JSONField(serialize=false)
    public String getPassword() {
//        return new BCryptPasswordEncoder().encode(passWord); //返回加密的密码
        return passWord; //直接返回密码
    }

    @Override
    @JSONField(serialize=false)
    public String getUsername() {
        return userName;
    }


    @Override
    @JSONField(serialize=false)
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    @JSONField(serialize=false)
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    @JSONField(serialize=false)
    public boolean isCredentialsNonExpired() {
        return true;
    }

//    @JsonIgnore//忽略该属性
    @Override
    @JSONField(serialize=false)
    public boolean isEnabled() {
        return true;
    }
}