<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ax.shop.mapper.IpLogMapper" >
  <resultMap id="BaseResultMap" type="com.ax.shop.entity.IpLog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="loginTime" property="loginTime" jdbcType="TIMESTAMP" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="loginState" property="loginState" jdbcType="INTEGER" />
    <result column="userType" property="userType" jdbcType="INTEGER" />
    <result column="userinfoId" property="userinfoId" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, loginTime, ip, loginState, userType, userinfoId
  </sql>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from t_ipLog
    where id = #{id,jdbcType=BIGINT}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_ipLog
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" parameterType="com.ax.shop.entity.IpLog" useGeneratedKeys="true" keyProperty="id" >
    insert into t_ipLog (username, loginTime, ip,
      loginState, userType, userinfoId
      )
    values (#{username,jdbcType=VARCHAR}, #{loginTime,jdbcType=TIMESTAMP}, #{ip,jdbcType=VARCHAR},
      #{loginState,jdbcType=INTEGER}, #{userType,jdbcType=INTEGER}, #{userinfoId,jdbcType=BIGINT}
      )
  </insert>

  <insert id="insertSelective" parameterType="com.ax.shop.entity.IpLog" useGeneratedKeys="true" keyProperty="id" >
    insert into t_ipLog
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="username != null" >
        username,
      </if>
      <if test="loginTime != null" >
        loginTime,
      </if>
      <if test="ip != null" >
        ip,
      </if>
      <if test="loginState != null" >
        loginState,
      </if>
      <if test="userType != null" >
        userType,
      </if>
      <if test="userinfoId != null" >
        userinfoId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="loginTime != null" >
        #{loginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="loginState != null" >
        #{loginState,jdbcType=INTEGER},
      </if>
      <if test="userType != null" >
        #{userType,jdbcType=INTEGER},
      </if>
      <if test="userinfoId != null" >
        #{userinfoId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.ax.shop.entity.IpLog" >
    update t_ipLog
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="loginTime != null" >
        loginTime = #{loginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ip != null" >
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="loginState != null" >
        loginState = #{loginState,jdbcType=INTEGER},
      </if>
      <if test="userType != null" >
        userType = #{userType,jdbcType=INTEGER},
      </if>
      <if test="userinfoId != null" >
        userinfoId = #{userinfoId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ax.shop.entity.IpLog" >
    update t_ipLog
    set username = #{username,jdbcType=VARCHAR},
      loginTime = #{loginTime,jdbcType=TIMESTAMP},
      ip = #{ip,jdbcType=VARCHAR},
      loginState = #{loginState,jdbcType=INTEGER},
      userType = #{userType,jdbcType=INTEGER},
      userinfoId = #{userinfoId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <sql id="base_query">

    <where>
      <if test="beginDate!=null">
        AND loginTime &gt;=#{beginDate}
      </if>

      <if test="endDate!=null">
        AND loginTime &lt;=#{endDate}
      </if>

      <if test="username!=null and like">
        AND username LIKE '%${username}%'
      </if>

      <if test="username!=null and !like">
        AND username = #{username}
      </if>

      <if test="userType>-1">
        AND userType = #{userType}
      </if>

    </where>

  </sql>


  <!--分页查询 个数-->
  <select id="queryForCount" resultType="int">
    SELECT COUNT(id) FROM t_ipLog
    <include refid="base_query" />


  </select>


  <!--分页查询 内容-->
  <select id="query"  resultMap="BaseResultMap" parameterType="java.lang.Long"  >
    SELECT  <include refid="Base_Column_List" />
    FROM t_ipLog
    <include refid="base_query" />

    ORDER BY loginTime DESC

    <!--<if test="pageSize>-1">-->
    <!--LIMIT #{start},#{pageSize}-->
    <!--</if>-->

  </select>



  <select id="queryPage"  resultMap="BaseResultMap" parameterType="com.ax.shop.query.IpLogQueryObject">
    SELECT *
    FROM t_ipLog
    <include refid="base_query" />
  </select>

  <select id="findByPageInfo" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_ipLog
  </select>


  <select id="findByPage" resultType="com.ax.shop.entity.IpLog">
    select
    <include refid="Base_Column_List" />
    from t_ipLog
  </select>


  <delete id="deleteByIdList"  parameterType = "java.util.List">
    delete from t_ipLog where id
    in
    <foreach collection="list"  item="item" open="(" separator="," close=")"  >
      #{item}
    </foreach>
  </delete>

  <delete id="deleteById">

  </delete>


  <insert id="insertList" parameterType="List">

    insert into t_ipLog
    (
    username,
    loginTime,
    ip,
    loginState,
    userType,
    userinfoId
    )

    values

    <foreach collection="list" item="item" index="index" separator=",">
      (
      #{item.username},
      #{item.loginTime},
      #{item.ip},
      #{item.loginState},
      #{item.userType},
      #{item.userinfoId}
      )
    </foreach>


  </insert>


  <update id="updateByList" parameterType="java.util.List">
    <foreach collection="list" item="item" index="index" open="" close="" separator=";">
      update t_ipLog
      <set>

        username=#{item.username,jdbcType=VARCHAR},
        loginTime=#{item.loginTime,jdbcType=TIMESTAMP},
        ip=#{item.ip,jdbcType=VARCHAR},
        loginState=#{item.loginState,jdbcType=INTEGER},
        userType=#{item.userType,jdbcType=INTEGER},
        userinfoId=#{item.userinfoId,jdbcType=BIGINT}

      </set>
      <where>
        id = #{item.id,jdbcType=BIGINT}
      </where>
    </foreach>
  </update>



  <!-- 批量更新第二种方法，通过 case when语句变相的进行批量更新 -->
  <update id="updateByListWhen" parameterType="java.util.List">
    update t_ipLog
    <trim prefix="set" suffixOverrides=",">

      <!-- 拼接case when 这是另一种写法，这种写着更专业的感觉 -->
      <trim prefix="username =case" suffix="end,">
        <foreach collection="list" item="item">
          <if test="item.username!=null">
            when id=#{item.id} then #{item.username}
          </if>
        </foreach>
      </trim>
      <trim prefix="loginTime =case" suffix="end,">
        <foreach collection="list" item="item">
          <if test="item.loginTime!=null">
            when id=#{item.id} then #{item.loginTime}
          </if>
        </foreach>
      </trim>
      <trim prefix="ip =case" suffix="end,">
        <foreach collection="list" item="item">
          <if test="item.ip!=null">
            when id=#{item.id} then #{item.ip}
          </if>
        </foreach>
      </trim>
      <trim prefix="loginState =case" suffix="end,">
        <foreach collection="list" item="item">
          <if test="item.loginState!=null">
            when id=#{item.id} then #{item.loginState}
          </if>
        </foreach>
      </trim>
      <trim prefix="userType =case" suffix="end,">
        <foreach collection="list" item="item">
          <if test="item.userType!=null">
            when id=#{item.id} then #{item.userType}
          </if>
        </foreach>
      </trim>
    </trim>
    <where>
      <foreach collection="list" separator="or" item="item">
        id = #{item.id}
      </foreach>
    </where>
  </update>


</mapper>